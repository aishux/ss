Step 1: Create Tables
Target Table:
This table has the columns: PARTNER_ID, COST_CENTER, and CLIENT_ADVISOR.

sql
Copy code
CREATE TABLE target_table (
    PARTNER_ID INT,
    COST_CENTER VARCHAR(50),
    CLIENT_ADVISOR VARCHAR(50)
);
Source Table:
This table has the columns: PARTNER_ID, COST_CENTER, CLIENT_ADVISOR, and CLIENT_ADVISOR_NAME. We'll use CLIENT_ADVISOR_NAME in the source but ignore it during the merge.

sql
Copy code
CREATE TABLE source_table (
    PARTNER_ID INT,
    COST_CENTER VARCHAR(50),
    CLIENT_ADVISOR VARCHAR(50),
    CLIENT_ADVISOR_NAME VARCHAR(50)
);
Step 2: Insert Random Data
Insert Data into target_table:
sql
Copy code
INSERT INTO target_table (PARTNER_ID, COST_CENTER, CLIENT_ADVISOR)
VALUES
    (1, 'C001', 'AdvisorA'),
    (2, 'C002', 'AdvisorB'),
    (3, 'C003', 'AdvisorC');
This inserts three rows into the target_table.

Insert Data into source_table:
sql
Copy code
INSERT INTO source_table (PARTNER_ID, COST_CENTER, CLIENT_ADVISOR, CLIENT_ADVISOR_NAME)
VALUES
    (1, 'C010', 'AdvisorX', 'John Doe'),  -- Existing PARTNER_ID
    (2, 'C020', 'AdvisorY', 'Jane Smith'), -- Existing PARTNER_ID
    (4, 'C004', 'AdvisorD', 'Alice Brown'); -- New PARTNER_ID
Here, we inserted two rows with PARTNER_IDs 1 and 2 that already exist in the target_table, but with different COST_CENTER and CLIENT_ADVISOR values. Additionally, we inserted a new row with PARTNER_ID 4, which doesn't exist in the target.

Step 3: Perform the MERGE Operation
Now, we will perform the MERGE to update the COST_CENTER and CLIENT_ADVISOR fields if the PARTNER_ID exists in the target, or insert a new row if it doesn't.

sql
Copy code
MERGE INTO target_table AS target
USING source_table AS source
ON target.PARTNER_ID = source.PARTNER_ID
WHEN MATCHED THEN
    UPDATE SET
        target.COST_CENTER = source.COST_CENTER,
        target.CLIENT_ADVISOR = source.CLIENT_ADVISOR
WHEN NOT MATCHED THEN
    INSERT (PARTNER_ID, COST_CENTER, CLIENT_ADVISOR)
    VALUES (source.PARTNER_ID, source.COST_CENTER, source.CLIENT_ADVISOR);
What Happens Here:
For PARTNER_ID = 1:

It exists in the target.
The COST_CENTER will be updated from 'C001' to 'C010', and the CLIENT_ADVISOR will be updated from 'AdvisorA' to 'AdvisorX'.
For PARTNER_ID = 2:

It also exists in the target.
The COST_CENTER will be updated from 'C002' to 'C020', and the CLIENT_ADVISOR will be updated from 'AdvisorB' to 'AdvisorY'.
For PARTNER_ID = 4:

It does not exist in the target.
A new row will be inserted with the PARTNER_ID of 4, COST_CENTER = 'C004', and CLIENT_ADVISOR = 'AdvisorD'.
Final Data in target_table:
After the MERGE operation, the data in the target_table would look like this:

sql
Copy code
SELECT * FROM target_table;

-- Result:
PARTNER_ID   COST_CENTER   CLIENT_ADVISOR
-----------------------------------------
1            C010          AdvisorX
2            C020          AdvisorY
3            C003          AdvisorC
4            C004          AdvisorD
Summary:
Rows where the PARTNER_ID matched were updated with new COST_CENTER and CLIENT_ADVISOR values.
A new row was inserted for PARTNER_ID = 4, which didnâ€™t exist in the target.
This demonstrates how the MERGE operation works in SQL when you want to update or insert data based on matching conditions.






